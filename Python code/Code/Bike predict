##########################################################################################################################
#################################################   Bike Rental Prediction    ############################################
##########################################################################################################################

############importing Libraries##########

import os
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency
import seaborn as sns
from random import randrange, uniform
import datetime as dt
#from sklearn.cross_validation import train_test_split
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
import statsmodels.api as sm
from sklearn.ensemble import RandomForestRegressor
from  matplotlib import pyplot

############working directory#################
os.chdir("C:/Users/ASUS/Desktop/Edwisor Training/Project-2_Bike rental prediction/Python code")

###########loading file####################
bike_data = pd.read_csv("day.csv")
bike_train = bike_data

############exploratory data analysis#######################
####Type Conversion#####

bike_train['season']= bike_train['season'].astype('category')
bike_train['yr']=bike_train['yr'].astype('int')
bike_train['mnth']=bike_train['mnth'].astype('category')
bike_train['holiday']=bike_train['holiday'].astype('int')
bike_train['workingday']=bike_train['workingday'].astype('int')
bike_train['weekday']=bike_train['weekday'].astype('category')
bike_train['weathersit']=bike_train['weathersit'].astype('category')
d1=bike_train['dteday'].copy()
for i in range (0,d1.shape[0]):
    d1[i]=dt.datetime.strptime(d1[i], '%Y-%m-%d').strftime('%d')
bike_train['dteday']=d1
bike_train['dteday']=bike_train['dteday'].astype('category')

##Dropping columns unnecessary####

bike_train = bike_train.drop(['instant','casual', 'registered'], axis=1)

print("Data types :", bike_train.dtypes)

##Check discription####
print("Description of Data")
print(bike_train.describe())


##We can see that no missing values are there in Data but we will check once##
############Missing value analysis#################

##Checking Null values#

response = bike_train.isnull().values.any()

print("Null :",response)

##There are no missing values ###

#No missing values###

################Outlier Analysis###################

#saving numeric values#

cnames=["temp","atemp","hum","windspeed",]

#ploting boxplotto visualize outliers#

plt.boxplot(bike_train['temp'])
plt.show()

plt.boxplot(bike_train['atemp'])
plt.show()

plt.boxplot(bike_train['hum'])
plt.show()


plt.boxplot(bike_train['windspeed'])
plt.show()

#############Feature Selection ##################


df_corr = bike_train

#Set the width and hieght of the plot

f, ax = plt.subplots(figsize=(7, 5))

#Set the width and hieght of the plot

f, ax = plt.subplots(figsize=(7, 5))

#Generate correlation matrix

corr = df_corr.corr()

#Plot using seaborn library

sns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),
square=True, ax=ax)            
plt.show()


#droping corelated variable
bike_train = bike_train.drop(['atemp'], axis=1)


############Modeling ###############################

#dividing data into train and test
train, test = train_test_split(bike_train, test_size=0.2)




######c50#######
fit_DT = DecisionTreeRegressor(max_depth=2).fit(train.iloc[:,0:11], train.iloc[:,11])
predictions_DT = fit_DT.predict(test.iloc[:,0:11])

#random forest
RFmodel = RandomForestRegressor(n_estimators = 200).fit(train.iloc[:,0:11], train.iloc[:,11])
RF_Predictions = RFmodel.predict(test.iloc[:,0:11])


#linear regression
#creating dummy variable
data_lr=bike_train.copy()
cat_names = ["season", "dteday", "weathersit", "mnth","weekday"]
for i in cat_names:
    temp = pd.get_dummies(data_lr[i], prefix = i)
    data_lr = data_lr.join(temp)
fields_to_drop = ['dteday', 'season', 'weathersit', 'weekday', 'mnth','cnt']
data_lr = data_lr.drop(fields_to_drop, axis=1)
data_lr=data_lr.join(bike_train['cnt'])

trainlr, testlr = train_test_split(data_lr, test_size=0.2)
model = sm.OLS(trainlr.iloc[:,63], trainlr.iloc[:,0:63]).fit()
predictions_LR = model.predict(testlr.iloc[:,0:63])


#defining MAPE function
def MAPE(y_true, y_pred): 
    mape = np.mean(np.abs((y_true - y_pred) / y_true))*100
    return mape
    

#MAPE for decision tree regression
x=MAPE(test.iloc[:,11], predictions_DT)

#MAPE for random forest regression
y=MAPE(test.iloc[:,11],RF_Predictions)

#MAPE for linear regression
z=MAPE(testlr.iloc[:,63], predictions_LR)

print("MAPE Dicision tree=",x)
print("MAPE Random forest=",y)
print("MAPE Linear Refression=",z)


result=pd.DataFrame(test.iloc[:,0:11])
result['pred_cnt'] = (RF_Predictions)

result.to_csv("Random forest output python.csv",index=False)
    
            
            
            
            
            
